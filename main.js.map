{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleships/webpack/bootstrap","webpack://battleships/webpack/runtime/define property getters","webpack://battleships/webpack/runtime/hasOwnProperty shorthand","webpack://battleships/./src/factories/gameboard.ts","webpack://battleships/./src/helper.ts","webpack://battleships/./src/factories/player.ts","webpack://battleships/./src/DOM.ts","webpack://battleships/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export function GameboardFactory(name) {\n    const hits = [];\n    const misses = [];\n    const occupied = [];\n    const receiveAttack = (coord) => {\n        if (occupied.includes(coord))\n            hits.push(coord);\n        else\n            misses.push(coord);\n    };\n    const allSunk = () => {\n        return occupied.length === hits.length;\n    };\n    const newShip = (coords) => {\n        if (coords.some((coord) => occupied.includes(coord)))\n            return \"Coordinate(s) already occupied\";\n        else\n            occupied.push(...coords);\n    };\n    return {\n        name,\n        hits,\n        misses,\n        occupied,\n        receiveAttack,\n        allSunk,\n        newShip,\n    };\n}\n","// Return all 8 surrounding coordinates around (x, y)\nexport const findNeighbours = (x, y) => {\n    const inBounds = (x, y) => x >= 1 && x <= 10 && y >= 1 && y <= 10 ? `${x},${y}` : undefined;\n    return {\n        right: inBounds(x, y + 1),\n        left: inBounds(x, y - 1),\n        top: inBounds(x - 1, y),\n        bottom: inBounds(x + 1, y),\n        topleft: inBounds(x - 1, y - 1),\n        topright: inBounds(x - 1, y + 1),\n        bottomleft: inBounds(x + 1, y - 1),\n        bottomright: inBounds(x + 1, y + 1),\n    };\n};\n","import { findNeighbours } from \"../helper\";\nexport function PlayerFactory() {\n    const availableMoves = [\n        ...Array.from({ length: 10 }, (_, x) => Array.from({ length: 10 }, (_, y) => `${x + 1},${y + 1}`)).flat(),\n    ];\n    let lastHitCoord = null;\n    const attack = (board, target) => {\n        if (!availableMoves.includes(target))\n            return \"That move is not available\";\n        board.receiveAttack(target);\n        const index = availableMoves.indexOf(target);\n        if (index > -1)\n            availableMoves.splice(index, 1);\n    };\n    const computerMove = (board) => {\n        if (lastHitCoord === null) {\n            // Pick a random square to attack\n            const randomTarget = availableMoves[Math.floor(Math.random() * availableMoves.length)];\n            board.receiveAttack(randomTarget);\n            if (board.hits.includes(randomTarget)) {\n                lastHitCoord = randomTarget; // Store the last hit coordinate\n            }\n            const moveIndex = availableMoves.indexOf(randomTarget);\n            if (moveIndex > -1)\n                availableMoves.splice(moveIndex, 1);\n        }\n        else {\n            // Find neigbours of last hit\n            const [xStr, yStr] = lastHitCoord.split(\",\");\n            const x = parseInt(xStr, 10);\n            const y = parseInt(yStr, 10);\n            const neighbours = findNeighbours(x, y);\n            // Only orthogonal neighbours (up/down/left/right)\n            const possibleCoords = [\n                neighbours.right,\n                neighbours.left,\n                neighbours.top,\n                neighbours.bottom,\n            ].filter((c) => !!c && availableMoves.includes(c));\n            if (possibleCoords.length > 0) {\n                const target = possibleCoords[Math.floor(Math.random() * possibleCoords.length)];\n                board.receiveAttack(target);\n                if (board.hits.includes(target)) {\n                    lastHitCoord = target; // Chain hunting if hit again\n                }\n                else {\n                    lastHitCoord = null; // Reset if miss\n                }\n                const moveIndex = availableMoves.indexOf(target);\n                if (moveIndex > -1)\n                    availableMoves.splice(moveIndex, 1);\n            }\n            else {\n                // No valid neighbours remaining - fall back to random\n                lastHitCoord = null;\n                computerMove(board);\n            }\n        }\n    };\n    const playerMove = (event, computerBoard) => {\n        const target = event.target;\n        const targetCoord = target.id.slice(1);\n        if (availableMoves.includes(targetCoord)) {\n            attack(computerBoard, targetCoord);\n        }\n    };\n    return {\n        attack,\n        playerMove,\n        computerMove,\n        availableMoves,\n        lastHitCoord,\n    };\n}\n","import { initGame, startBattle } from \"./index\";\nimport { findNeighbours } from \"./helper\";\n// Helper function to return class name based on ship type\nfunction shipClass(type) {\n    switch (type) {\n        case \"C\":\n            return \"carrier\";\n        case \"B\":\n            return \"battleship\";\n        case \"D\":\n            return \"destroyer\";\n        case \"P\":\n            return \"patrolboat\";\n        default:\n            return \"\";\n    }\n}\nexport function getDOMElements() {\n    return {\n        playerGrid: document.getElementById(\"playerGrid\"),\n        playerHeader: document.getElementById(\"playerHeader\"),\n        computerGrid: document.getElementById(\"computerGrid\"),\n        computerHeader: document.getElementById(\"computerHeader\"),\n        start: document.getElementById(\"start\"),\n        heading: document.querySelector(\"h1\"),\n        infoBox: document.getElementById(\"info\"),\n        winnerText: document.getElementById(\"winner\"),\n    };\n}\nexport function createPlayerGrid(player, playerBoard, computer, computerBoard) {\n    const { playerGrid, playerHeader } = getDOMElements();\n    if (!playerGrid || !playerHeader)\n        return;\n    playerGrid.innerHTML = \"\";\n    for (let i = 0; i < 100; i++) {\n        let playerSquare = document.createElement(\"div\");\n        playerSquare.className = \"square pSquare\";\n        playerSquare.id = \"p\" + `${player.availableMoves[i]}`;\n        playerSquare.addEventListener(\"dragover\", dragoverHandler);\n        playerSquare.addEventListener(\"drop\", (e) => dropHandler(e, playerBoard, player, computer, computerBoard));\n        playerGrid.appendChild(playerSquare);\n    }\n    playerHeader.textContent = \"Player\";\n}\nexport function startEventListener() {\n    const { start, heading, infoBox } = getDOMElements();\n    if (start)\n        start.addEventListener(\"click\", function () {\n            if (start.textContent === \"Start Game\") {\n                start.textContent = \"Restart Game\";\n                heading.classList.remove(\"large\");\n                infoBox.style.display = \"block\";\n                initGame();\n            }\n            else {\n                window.location.reload();\n            }\n        });\n}\nexport function renderMovableBoats(player, playerBoard, computer, computerBoard) {\n    const { infoBox, computerGrid } = getDOMElements();\n    if (!computerGrid || !infoBox)\n        return;\n    let displayDiv = document.getElementById(\"boatsDisplay\");\n    if (!displayDiv) {\n        displayDiv = document.createElement(\"div\");\n        displayDiv.id = \"boatsDisplay\";\n        computerGrid.appendChild(displayDiv);\n    }\n    else {\n        displayDiv.innerHTML = \"\";\n    }\n    computerGrid.className = \"\";\n    createPlayerGrid(player, playerBoard, computer, computerBoard);\n    infoBox.textContent = \"Place your ships on the grid. Click to rotate ship\";\n    const shipSizeArray = [\n        [\"C\", \"C\", \"C\", \"C\", \"C\"],\n        [\"B\", \"B\", \"B\", \"B\"],\n        [\"B\", \"B\", \"B\", \"B\"],\n        [\"D\", \"D\", \"D\"],\n        [\"D\", \"D\", \"D\"],\n        [\"D\", \"D\", \"D\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n    ];\n    for (let i = 0; i < shipSizeArray.length; i++) {\n        const boat = document.createElement(\"div\");\n        const type = shipSizeArray[i][0];\n        boat.className = `boat ${shipClass(type)}`;\n        boat.id = `${shipClass(type)}${i}`;\n        for (let j = 0; j < shipSizeArray[i].length; j++) {\n            const boatSquare = document.createElement(\"div\");\n            boatSquare.className = `boatSquare ${shipClass(type)}Square`;\n            boat.appendChild(boatSquare);\n        }\n        displayDiv.appendChild(boat);\n    }\n}\n// Add event listeners to boats for dragging and rotating\nexport function addBoatEventListeners() {\n    const boats = document.getElementsByClassName(\"boat\");\n    for (let i = 0; i < boats.length; i++) {\n        const boat = boats[i];\n        boat.addEventListener(\"dragstart\", dragstartHandler);\n        boat.addEventListener(\"click\", () => {\n            boat.classList.toggle(\"vertical\");\n        });\n    }\n}\n// Drag and drop for boat placement\nfunction dragstartHandler(e) {\n    const { infoBox } = getDOMElements();\n    const target = e.target;\n    if (e.dataTransfer) {\n        e.dataTransfer.setData(\"text\", target.id);\n        e.dataTransfer.setData(\"text/class\", Array.from(target.classList).toString());\n    }\n    if (infoBox)\n        infoBox.textContent = \"Place your ships on the grid. Click to rotate ship\";\n}\nfunction dragoverHandler(e) {\n    e.preventDefault();\n    if (e.dataTransfer)\n        e.dataTransfer.dropEffect = \"move\";\n}\n// Drop handler that attempts DOM placement of boat and returns coords so caller can validate and commit to a board\nfunction dropHandler(e, playerBoard, player, computer, computerBoard) {\n    var _a, _b;\n    e.preventDefault();\n    const { infoBox } = getDOMElements();\n    if (!e.dataTransfer)\n        return null;\n    const target = e.target;\n    const boatID = e.dataTransfer.getData(\"text\");\n    const boatClass = e.dataTransfer.getData(\"text/class\");\n    const boat = document.getElementById(boatID);\n    if (!boat || !((_a = target === null || target === void 0 ? void 0 : target.id) === null || _a === void 0 ? void 0 : _a.startsWith(\"p\")))\n        return null;\n    const length = boat.children.length;\n    const [xStr, yStr] = target.id.slice(1).split(\",\");\n    const startX = parseInt(xStr, 10);\n    const startY = parseInt(yStr, 10);\n    const isVertical = boatClass.includes(\"vertical\");\n    const coords = [];\n    // Collect all target coordinates\n    for (let i = 0; i < length; i++) {\n        const x = isVertical ? startX + i : startX;\n        const y = isVertical ? startY : startY + i;\n        coords.push(`${x},${y}`);\n    }\n    // Check all target coordinate are within grid and available\n    const valid = coords.every((coord) => {\n        const square = document.getElementById(\"p\" + coord);\n        return square !== null && !square.classList.contains(\"occupied\");\n    });\n    if (!valid) {\n        if (infoBox)\n            infoBox.textContent = \"Boat cannot be placed there!\";\n        return null;\n    }\n    // Place boat on grid if valid\n    for (let i = 0; i < coords.length; i++) {\n        const coord = coords[i];\n        const nextSquare = document.getElementById(\"p\" + coord);\n        boat.children[0].id = \"p\" + coord; // Update id for testing\n        (_b = nextSquare.parentNode) === null || _b === void 0 ? void 0 : _b.replaceChild(boat.children[0], nextSquare);\n    }\n    finalizeBoatPlacement(playerBoard, coords, player, computer, computerBoard);\n    return coords;\n}\n// Rendering\nexport function renderPlayerBoats(playerBoard) {\n    const { playerGrid } = getDOMElements();\n    if (!playerGrid)\n        return;\n    const squares = playerGrid.children;\n    for (let i = 0; i < squares.length; i++) {\n        const div = squares[i];\n        const coord = div.id.slice(1);\n        if (playerBoard.occupied.includes(coord)) {\n            div.className = \"square pSquare occupied\";\n        }\n    }\n}\nexport function finalizeBoatPlacement(playerBoard, coords, player, computer, computerBoard) {\n    const { infoBox } = getDOMElements();\n    const occupied = new Set(playerBoard.occupied);\n    // Find all neighbours of the proposed ship coordinates\n    const allNeighbours = [];\n    for (const c of coords) {\n        const [xStr, yStr] = c.split(\",\");\n        const x = parseInt(xStr, 10);\n        const y = parseInt(yStr, 10);\n        const neighbours = findNeighbours(x, y);\n        allNeighbours.push(...Object.values(neighbours).filter(Boolean)); // filter undefined neighbours\n    }\n    // Check if overlap or touching\n    const overlap = coords.some((c) => occupied.has(c)); // overlap existing ship\n    const touching = allNeighbours.some((n) => occupied.has(n)); // touching another ship\n    const invalid = overlap || touching;\n    if (!invalid) {\n        // Place ship\n        playerBoard.newShip(coords);\n        renderPlayerBoats(playerBoard);\n        // Check if all boats placed\n        if (playerBoard.occupied.length === 30) {\n            if (infoBox)\n                infoBox.textContent = \"All ships placed! Let the battle begin!\";\n            startBattle(player, computer, playerBoard, computerBoard);\n        }\n        return true;\n    }\n    else {\n        if (infoBox)\n            infoBox.textContent = \"Boat cannot be placed there!\";\n        return false;\n    }\n}\nexport function createComputerGrid(player, computerBoard) {\n    const { computerGrid, computerHeader } = getDOMElements();\n    if (!computerGrid || !computerHeader)\n        return;\n    computerGrid.innerHTML = \"\";\n    computerGrid.className = \"grid\";\n    for (let i = 0; i < 100; i++) {\n        let computerSquare = document.createElement(\"div\");\n        computerSquare.className = \"square cSquare\";\n        computerSquare.id = \"c\" + `${player.availableMoves[i]}`;\n        computerGrid.appendChild(computerSquare);\n    }\n    computerHeader.textContent = \"Computer\";\n    // Create computer's boats\n    computerBoard.newShip([\"1,6\", \"1,7\", \"1,8\", \"1,9\", \"1,10\"]);\n    computerBoard.newShip([\"8,2\", \"8,3\", \"8,4\", \"8,5\"]);\n    computerBoard.newShip([\"6,9\", \"7,9\", \"8,9\", \"9,9\"]);\n    computerBoard.newShip([\"3,2\", \"4,2\", \"5,2\"]);\n    computerBoard.newShip([\"10,5\", \"10,6\", \"10,7\"]);\n    computerBoard.newShip([\"4,7\", \"4,8\", \"4,9\"]);\n    computerBoard.newShip([\"1,1\", \"1,2\"]);\n    computerBoard.newShip([\"10,1\", \"10,2\"]);\n    computerBoard.newShip([\"5,5\", \"6,5\"]);\n    computerBoard.newShip([\"2,4\", \"3,4\"]);\n}\nexport function renderComputerBoard(computerBoard) {\n    const squares = document.getElementsByClassName(\"square cSquare\");\n    for (let i = 0; i < squares.length; i++) {\n        const coord = squares[i].id.slice(1);\n        if (computerBoard.hits.includes(coord))\n            squares[i].className = \"square cSquare hit\";\n        else if (computerBoard.misses.includes(coord))\n            squares[i].className = \"square cSquare miss\";\n    }\n}\nexport function renderPlayerBoard(playerBoard) {\n    const squares = document.getElementsByClassName(\"square pSquare\");\n    for (let i = 0; i < squares.length; i++) {\n        const coord = squares[i].id.slice(1);\n        if (playerBoard.hits.includes(coord))\n            squares[i].className = \"square pSquare hit\";\n        else if (playerBoard.misses.includes(coord))\n            squares[i].className = \"square pSquare miss\";\n        else if (playerBoard.occupied.includes(coord))\n            squares[i].className = \"square pSquare occupied\";\n    }\n}\n// Event listener management for computer grid squares\nexport function addSquareEventListeners(playerClickHandler) {\n    const squares = document.getElementsByClassName(\"square cSquare\");\n    for (var i = 0; i < squares.length; i++) {\n        squares[i].removeEventListener(\"click\", playerClickHandler);\n        if (!squares[i].classList.contains(\"hit\") &&\n            !squares[i].classList.contains(\"miss\")) {\n            squares[i].addEventListener(\"click\", playerClickHandler);\n        }\n    }\n}\n// Info helpers\nexport function infoPlayerMove() {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    infoBox.textContent = \"Your move! Choose a square to attack.\";\n}\nexport function infoComputerMove() {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    infoBox.textContent = \"Computer is taking their turn.\";\n}\nexport function infoPlayerWin() {\n    const { infoBox, winnerText } = getDOMElements();\n    if (infoBox)\n        infoBox.textContent = \"All of Computer's ships have been sunk! You win!\";\n    if (winnerText)\n        winnerText.style.display = \"block\";\n}\nexport function infoComputerWin() {\n    const { infoBox } = getDOMElements();\n    infoBox.textContent = \"Computer has sunk all your ships! You lose!\";\n}\nexport function infoSunkBoat(playerName, shipCoordsArray) {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    let len = shipCoordsArray.shipCoords.length;\n    const label = len === 5\n        ? \"Carrier\"\n        : len === 4\n            ? \"Battleship\"\n            : len === 3\n                ? \"Destroyer\"\n                : len === 2\n                    ? \"Patrol boat\"\n                    : \"Ship\";\n    infoBox.textContent = `${playerName}'s ${label} sunk!`;\n}\n","import { GameboardFactory } from \"./factories/gameboard\";\nimport { PlayerFactory } from \"./factories/player\";\nimport { startEventListener, createComputerGrid, renderMovableBoats, addBoatEventListeners, renderComputerBoard, infoPlayerMove, addSquareEventListeners, renderPlayerBoard, } from \"./DOM\";\nstartEventListener();\nexport function createPlayersAndBoards() {\n    const player = PlayerFactory();\n    const computer = PlayerFactory();\n    const playerBoard = GameboardFactory(\"Player\");\n    const computerBoard = GameboardFactory(\"Computer\");\n    return { player, computer, playerBoard, computerBoard };\n}\nexport function initGame() {\n    const { player, playerBoard, computer, computerBoard } = createPlayersAndBoards();\n    renderMovableBoats(player, playerBoard, computer, computerBoard);\n    addBoatEventListeners();\n}\nexport function startBattle(player, computer, playerBoard, computerBoard) {\n    createComputerGrid(computer, computerBoard);\n    renderPlayerBoard(playerBoard);\n    renderComputerBoard(computerBoard);\n    infoPlayerMove();\n    addSquareEventListeners((e) => player.playerMove(e, computerBoard));\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","GameboardFactory","name","hits","misses","occupied","receiveAttack","coord","includes","push","allSunk","length","newShip","coords","some","findNeighbours","x","y","inBounds","undefined","right","left","top","bottom","topleft","topright","bottomleft","bottomright","PlayerFactory","availableMoves","Array","from","_","flat","lastHitCoord","attack","board","target","index","indexOf","splice","computerMove","randomTarget","Math","floor","random","moveIndex","xStr","yStr","split","parseInt","neighbours","possibleCoords","filter","c","playerMove","event","computerBoard","targetCoord","id","slice","shipClass","type","getDOMElements","playerGrid","document","getElementById","playerHeader","computerGrid","computerHeader","start","heading","querySelector","infoBox","winnerText","dragstartHandler","e","dataTransfer","setData","classList","toString","textContent","dragoverHandler","preventDefault","dropEffect","dropHandler","playerBoard","player","computer","_a","_b","boatID","getData","boatClass","boat","startsWith","children","startX","startY","isVertical","i","every","square","contains","nextSquare","parentNode","replaceChild","Set","allNeighbours","values","Boolean","overlap","has","touching","n","squares","div","className","renderPlayerBoats","startBattle","finalizeBoatPlacement","initGame","displayDiv","innerHTML","createElement","appendChild","playerSquare","addEventListener","createPlayerGrid","shipSizeArray","j","boatSquare","renderMovableBoats","boats","getElementsByClassName","toggle","addBoatEventListeners","computerSquare","createComputerGrid","renderPlayerBoard","renderComputerBoard","infoPlayerMove","playerClickHandler","removeEventListener","addSquareEventListeners","remove","style","display","window","location","reload","startEventListener"],"sourceRoot":""}