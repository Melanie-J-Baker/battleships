{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleships/webpack/bootstrap","webpack://battleships/webpack/runtime/define property getters","webpack://battleships/webpack/runtime/hasOwnProperty shorthand","webpack://battleships/./src/factories/gameboard.ts","webpack://battleships/./src/helper.ts","webpack://battleships/./src/factories/player.ts","webpack://battleships/./src/DOM.ts","webpack://battleships/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export function GameboardFactory(name) {\n    const hits = [];\n    const misses = [];\n    const occupied = [];\n    const receiveAttack = (coord) => {\n        if (occupied.includes(coord))\n            hits.push(coord);\n        else\n            misses.push(coord);\n    };\n    const allSunk = () => {\n        return occupied.length === hits.length;\n    };\n    const newShip = (coords) => {\n        if (coords.some((coord) => occupied.includes(coord)))\n            return \"Coordinate(s) already occupied\";\n        else\n            occupied.push(...coords);\n    };\n    return {\n        name,\n        hits,\n        misses,\n        occupied,\n        receiveAttack,\n        allSunk,\n        newShip,\n    };\n}\n","export const findNeighbours = (index) => {\n    var _a, _b, _c, _d, _e, _f;\n    const array2d = [];\n    let counter = 0;\n    for (let i = 0; i < 100 / 10; i++) {\n        array2d.push([]);\n        for (let j = 0; j < 10 && counter < 100; j++) {\n            array2d[i].push(counter);\n            counter++;\n        }\n    }\n    const rowIndex = Math.floor(index / 10);\n    const columnIndex = array2d[rowIndex].findIndex((c) => c === index);\n    const right = array2d[rowIndex][columnIndex + 1];\n    const left = array2d[rowIndex][columnIndex - 1];\n    const top = (_a = array2d[rowIndex - 1]) === null || _a === void 0 ? void 0 : _a[columnIndex];\n    const bottom = (_b = array2d[rowIndex + 1]) === null || _b === void 0 ? void 0 : _b[columnIndex];\n    const topleft = (_c = array2d[rowIndex - 1]) === null || _c === void 0 ? void 0 : _c[columnIndex - 1];\n    const topright = (_d = array2d[rowIndex - 1]) === null || _d === void 0 ? void 0 : _d[columnIndex + 1];\n    const bottomleft = (_e = array2d[rowIndex + 1]) === null || _e === void 0 ? void 0 : _e[columnIndex - 1];\n    const bottomright = (_f = array2d[rowIndex + 1]) === null || _f === void 0 ? void 0 : _f[columnIndex + 1];\n    return {\n        right,\n        left,\n        top,\n        bottom,\n        topleft,\n        topright,\n        bottomleft,\n        bottomright,\n    };\n};\n","import { findNeighbours } from \"../helper\";\nexport function PlayerFactory() {\n    const availableMoves = [\n        ...Array.from({ length: 10 }, (_, x) => Array.from({ length: 10 }, (_, y) => `${x + 1},${y + 1}`)).flat(),\n    ];\n    let lastHitIndex = null;\n    const attack = (board, target) => {\n        if (!availableMoves.includes(target))\n            return \"That move is not available\";\n        board.receiveAttack(target);\n        const index = availableMoves.indexOf(target);\n        if (index > -1)\n            availableMoves.splice(index, 1);\n    };\n    const computerMove = (board) => {\n        if (lastHitIndex === null) {\n            const randomTarget = availableMoves[Math.floor(Math.random() * availableMoves.length)];\n            board.receiveAttack(randomTarget);\n            if (board.hits.includes(randomTarget)) {\n                lastHitIndex = availableMoves.indexOf(randomTarget);\n            }\n            else {\n                lastHitIndex = null;\n            }\n            const moveIndex = availableMoves.indexOf(randomTarget);\n            if (moveIndex > -1)\n                availableMoves.splice(moveIndex, 1);\n        }\n        else {\n            // logic using findNeighbours\n            const neighbours = findNeighbours(lastHitIndex);\n            const neighboursArray = Object.values(neighbours).slice(0, 4); // up/down/left/right\n            const validNeighbours = neighboursArray.filter((x) => x !== undefined);\n            const neighbourIndex = validNeighbours[Math.floor(Math.random() * validNeighbours.length)];\n            const neighbourCoord = availableMoves[neighbourIndex];\n            board.receiveAttack(neighbourCoord);\n            lastHitIndex = board.hits.includes(neighbourCoord)\n                ? availableMoves.indexOf(neighbourCoord)\n                : null;\n            const moveIndex = availableMoves.indexOf(neighbourCoord);\n            if (moveIndex > -1)\n                availableMoves.splice(moveIndex, 1);\n        }\n    };\n    const playerMove = (event, computerBoard) => {\n        const target = event.target;\n        const targetCoord = target.id.slice(1);\n        if (availableMoves.includes(targetCoord)) {\n            attack(computerBoard, targetCoord);\n        }\n    };\n    return {\n        attack,\n        playerMove,\n        computerMove,\n        availableMoves,\n        lastHitIndex,\n    };\n}\n","import { initGame, startBattle } from \"./index\";\nimport { findNeighbours } from \"./helper\";\n// Helper function to return class name based on ship type\nfunction shipClass(type) {\n    switch (type) {\n        case \"C\":\n            return \"carrier\";\n        case \"B\":\n            return \"battleship\";\n        case \"D\":\n            return \"destroyer\";\n        case \"P\":\n            return \"patrolboat\";\n        default:\n            return \"\";\n    }\n}\nexport function getDOMElements() {\n    return {\n        playerGrid: document.getElementById(\"playerGrid\"),\n        playerHeader: document.getElementById(\"playerHeader\"),\n        computerGrid: document.getElementById(\"computerGrid\"),\n        computerHeader: document.getElementById(\"computerHeader\"),\n        start: document.getElementById(\"start\"),\n        heading: document.querySelector(\"h1\"),\n        infoBox: document.getElementById(\"info\"),\n        winnerText: document.getElementById(\"winner\"),\n    };\n}\nexport function createPlayerGrid(player, playerBoard, computer, computerBoard) {\n    const { playerGrid, playerHeader } = getDOMElements();\n    if (!playerGrid || !playerHeader)\n        return;\n    playerGrid.innerHTML = \"\";\n    for (let i = 0; i < 100; i++) {\n        let playerSquare = document.createElement(\"div\");\n        playerSquare.className = \"square pSquare\";\n        playerSquare.id = \"p\" + `${player.availableMoves[i]}`;\n        playerSquare.addEventListener(\"dragover\", dragoverHandler);\n        playerSquare.addEventListener(\"drop\", (e) => dropHandler(e, playerBoard, player, computer, computerBoard));\n        playerGrid.appendChild(playerSquare);\n    }\n    playerHeader.textContent = \"Player\";\n}\nexport function startEventListener() {\n    const { start, heading, infoBox } = getDOMElements();\n    start.addEventListener(\"click\", function () {\n        if (start.textContent === \"Start Game\") {\n            start.textContent = \"Restart Game\";\n            heading.classList.remove(\"large\");\n            infoBox.style.display = \"block\";\n            initGame();\n        }\n        else {\n            window.location.reload();\n        }\n    });\n}\nexport function renderMovableBoats(player, playerBoard, computer, computerBoard) {\n    const { infoBox, computerGrid } = getDOMElements();\n    if (!computerGrid || !infoBox)\n        return;\n    let displayDiv = document.getElementById(\"boatsDisplay\");\n    if (!displayDiv) {\n        displayDiv = document.createElement(\"div\");\n        displayDiv.id = \"boatsDisplay\";\n        computerGrid.appendChild(displayDiv);\n    }\n    else {\n        displayDiv.innerHTML = \"\";\n    }\n    computerGrid.className = \"\";\n    createPlayerGrid(player, playerBoard, computer, computerBoard);\n    infoBox.textContent = \"Place your ships on the grid. Click to rotate ship\";\n    const shipSizeArray = [\n        [\"C\", \"C\", \"C\", \"C\", \"C\"],\n        [\"B\", \"B\", \"B\", \"B\"],\n        [\"B\", \"B\", \"B\", \"B\"],\n        [\"D\", \"D\", \"D\"],\n        [\"D\", \"D\", \"D\"],\n        [\"D\", \"D\", \"D\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n    ];\n    for (let i = 0; i < shipSizeArray.length; i++) {\n        const boat = document.createElement(\"div\");\n        const type = shipSizeArray[i][0];\n        boat.className = `boat ${shipClass(type)}`;\n        boat.id = `${shipClass(type)}${i}`;\n        for (let j = 0; j < shipSizeArray[i].length; j++) {\n            const boatSquare = document.createElement(\"div\");\n            boatSquare.className = `boatSquare ${shipClass(type)}Square`;\n            boatSquare.draggable = false;\n            boat.appendChild(boatSquare);\n        }\n        displayDiv.appendChild(boat);\n    }\n}\n// Add event listeners to boats for dragging and rotating\nexport function addBoatEventListeners() {\n    const boats = document.getElementsByClassName(\"boat\");\n    for (let i = 0; i < boats.length; i++) {\n        const boat = boats[i];\n        boat.draggable = true;\n        boat.addEventListener(\"dragstart\", dragstartHandler);\n        boat.addEventListener(\"click\", () => {\n            boat.classList.toggle(\"vertical\");\n        });\n    }\n}\n// Drag and drop for boat placement\nfunction dragstartHandler(e) {\n    const { infoBox } = getDOMElements();\n    const target = e.target;\n    if (e.dataTransfer) {\n        e.dataTransfer.setData(\"text\", target.id);\n        e.dataTransfer.setData(\"text/class\", Array.from(target.classList).toString());\n    }\n    if (infoBox)\n        infoBox.textContent = \"Place your ships on the grid. Click to rotate ship\";\n}\nfunction dragoverHandler(e) {\n    e.preventDefault();\n    if (e.dataTransfer)\n        e.dataTransfer.dropEffect = \"move\";\n}\n// Drop handler that attempts DOM placement of boat and returns coords so caller can validate and commit to a board\nfunction dropHandler(e, playerBoard, player, computer, computerBoard) {\n    var _a;\n    e.preventDefault();\n    const { infoBox } = getDOMElements();\n    if (!e.dataTransfer)\n        return null;\n    const target = e.target;\n    const boatID = e.dataTransfer.getData(\"text\");\n    const boatClass = e.dataTransfer.getData(\"text/class\");\n    const boat = document.getElementById(boatID);\n    if (!boat || !((_a = target === null || target === void 0 ? void 0 : target.id) === null || _a === void 0 ? void 0 : _a.startsWith(\"p\")))\n        return null;\n    const length = boat.children.length;\n    const [xStr, yStr] = target.id.slice(1).split(\",\");\n    const startX = parseInt(xStr, 10);\n    const startY = parseInt(yStr, 10);\n    const isVertical = boatClass.includes(\"vertical\");\n    const coords = [];\n    // Try to place each boat part\n    for (let i = 0; i < length; i++) {\n        const x = isVertical ? startX + i : startX;\n        const y = isVertical ? startY : startY + i;\n        const coord = `${x},${y}`;\n        const newID = `p${coord}`;\n        const nextSquare = document.getElementById(newID);\n        if (nextSquare === null || nextSquare === void 0 ? void 0 : nextSquare.parentNode) {\n            // move one block of boat into place\n            boat.children[0].id = newID;\n            nextSquare.parentNode.replaceChild(boat.children[0], nextSquare);\n        }\n        else {\n            if (infoBox)\n                infoBox.textContent = \"Boat cannot be placed there!\";\n            boat.draggable = false;\n            boat.draggable = true;\n            return null;\n        }\n    }\n    finalizeBoatPlacement(playerBoard, coords, player, computer, computerBoard);\n    return coords;\n}\n// Rendering\nexport function renderPlayerBoats(playerBoard) {\n    const { playerGrid } = getDOMElements();\n    if (!playerGrid)\n        return;\n    const squares = playerGrid.children;\n    for (let i = 0; i < squares.length; i++) {\n        const div = squares[i];\n        const coord = div.id.slice(1);\n        if (playerBoard.occupied.includes(coord)) {\n            div.className = \"square pSquare occupied\";\n        }\n    }\n}\nexport function finalizeBoatPlacement(playerBoard, coords, player, computer, computerBoard) {\n    const { infoBox } = getDOMElements();\n    const neighbourCoords = findNeighbours(parseInt(coords[0]));\n    if (coords.length > 0 &&\n        !coords.some((c) => Object.values(neighbourCoords).includes(parseInt(c)) &&\n            coords.every((c) => !playerBoard.occupied.includes(c)))) {\n        playerBoard.newShip(coords);\n        renderPlayerBoats(playerBoard);\n        // Check if all boats placed\n        if (playerBoard.occupied.length === 30) {\n            if (infoBox)\n                infoBox.textContent = \"All ships placed! Let the battle begin!\";\n            startBattle(player, computer, playerBoard, computerBoard);\n        }\n        return true;\n    }\n    else {\n        playerBoard.occupied = playerBoard.occupied.filter((coord) => !coords.includes(coord));\n        if (infoBox)\n            infoBox.textContent = \"Boat cannot be placed there!\";\n        return false;\n    }\n}\nexport function createComputerGrid(player, computerBoard) {\n    const { computerGrid, computerHeader } = getDOMElements();\n    if (!computerGrid || !computerHeader)\n        return;\n    computerGrid.innerHTML = \"\";\n    computerGrid.className = \"grid\";\n    for (let i = 0; i < 100; i++) {\n        let computerSquare = document.createElement(\"div\");\n        computerSquare.className = \"square cSquare\";\n        computerSquare.id = \"c\" + `${player.availableMoves[i]}`;\n        computerGrid.appendChild(computerSquare);\n    }\n    computerHeader.textContent = \"Computer\";\n    // Create computer's boats\n    computerBoard.newShip([\"1,6\", \"1,7\", \"1,8\", \"1,9\", \"1,10\"]);\n    computerBoard.newShip([\"8,2\", \"8,3\", \"8,4\", \"8,5\"]);\n    computerBoard.newShip([\"6,9\", \"7,9\", \"8,9\", \"9,9\"]);\n    computerBoard.newShip([\"3,2\", \"4,2\", \"5,2\"]);\n    computerBoard.newShip([\"10,5\", \"10,6\", \"10,7\"]);\n    computerBoard.newShip([\"4,7\", \"4,8\", \"4,9\"]);\n    computerBoard.newShip([\"1,1\", \"1,2\"]);\n    computerBoard.newShip([\"10,1\", \"10,2\"]);\n    computerBoard.newShip([\"5,5\", \"6,5\"]);\n    computerBoard.newShip([\"2,4\", \"3,4\"]);\n}\nexport function renderComputerBoard(computerBoard) {\n    const squares = document.getElementsByClassName(\"square cSquare\");\n    for (let i = 0; i < squares.length; i++) {\n        const coord = squares[i].id.slice(1);\n        if (computerBoard.hits.includes(coord))\n            squares[i].className = \"square cSquare hit\";\n        else if (computerBoard.misses.includes(coord))\n            squares[i].className = \"square cSquare miss\";\n    }\n}\nexport function renderPlayerBoard(playerBoard) {\n    const squares = document.getElementsByClassName(\"square pSquare\");\n    for (let i = 0; i < squares.length; i++) {\n        const coord = squares[i].id.slice(1);\n        if (playerBoard.hits.includes(coord))\n            squares[i].className = \"square pSquare hit\";\n        else if (playerBoard.misses.includes(coord))\n            squares[i].className = \"square pSquare miss\";\n        else if (playerBoard.occupied.includes(coord))\n            squares[i].className = \"square pSquare occupied\";\n    }\n}\n// Event listener management for computer grid squares\nexport function addSquareEventListeners(playerClickHandler) {\n    const squares = document.getElementsByClassName(\"square cSquare\");\n    for (var i = 0; i < squares.length; i++) {\n        squares[i].removeEventListener(\"click\", playerClickHandler);\n        if (!squares[i].classList.contains(\"hit\") &&\n            !squares[i].classList.contains(\"miss\")) {\n            squares[i].addEventListener(\"click\", playerClickHandler);\n        }\n    }\n}\n// Info helpers\nexport function infoPlayerMove() {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    infoBox.textContent = \"Your move! Choose a square to attack.\";\n}\nexport function infoComputerMove() {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    infoBox.textContent = \"Computer is taking their turn.\";\n}\nexport function infoPlayerWin() {\n    const { infoBox, winnerText } = getDOMElements();\n    if (infoBox)\n        infoBox.textContent = \"All of Computer's ships have been sunk! You win!\";\n    if (winnerText)\n        winnerText.style.display = \"block\";\n}\nexport function infoComputerWin() {\n    const { infoBox } = getDOMElements();\n    infoBox.textContent = \"Computer has sunk all your ships! You lose!\";\n}\nexport function infoSunkBoat(playerName, shipCoordsArray) {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    let len = shipCoordsArray.shipCoords.length;\n    const label = len === 5\n        ? \"Carrier\"\n        : len === 4\n            ? \"Battleship\"\n            : len === 3\n                ? \"Destroyer\"\n                : len === 2\n                    ? \"Patrol boat\"\n                    : \"Ship\";\n    infoBox.textContent = `${playerName}'s ${label} sunk!`;\n}\n","import { GameboardFactory } from \"./factories/gameboard\";\nimport { PlayerFactory } from \"./factories/player\";\nimport { startEventListener, createComputerGrid, renderMovableBoats, addBoatEventListeners, renderComputerBoard, infoPlayerMove, addSquareEventListeners, renderPlayerBoard, } from \"./DOM\";\nstartEventListener();\nexport function createPlayersAndBoards() {\n    const player = PlayerFactory();\n    const computer = PlayerFactory();\n    const playerBoard = GameboardFactory(\"Player\");\n    const computerBoard = GameboardFactory(\"Computer\");\n    return { player, computer, playerBoard, computerBoard };\n}\nexport function initGame() {\n    const { player, playerBoard, computer, computerBoard } = createPlayersAndBoards();\n    renderMovableBoats(player, playerBoard, computer, computerBoard);\n    addBoatEventListeners();\n}\nexport function startBattle(player, computer, playerBoard, computerBoard) {\n    createComputerGrid(computer, computerBoard);\n    renderPlayerBoard(playerBoard);\n    renderComputerBoard(computerBoard);\n    infoPlayerMove();\n    addSquareEventListeners((e) => player.playerMove(e, computerBoard));\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","GameboardFactory","name","hits","misses","occupied","receiveAttack","coord","includes","push","allSunk","length","newShip","coords","some","findNeighbours","index","_a","_b","_c","_d","_e","_f","array2d","counter","i","j","rowIndex","Math","floor","columnIndex","findIndex","c","right","left","top","bottom","topleft","topright","bottomleft","bottomright","PlayerFactory","availableMoves","Array","from","_","x","y","flat","lastHitIndex","attack","board","target","indexOf","splice","playerMove","event","computerBoard","targetCoord","id","slice","computerMove","randomTarget","random","moveIndex","neighbours","validNeighbours","values","filter","undefined","neighbourIndex","neighbourCoord","shipClass","type","getDOMElements","playerGrid","document","getElementById","playerHeader","computerGrid","computerHeader","start","heading","querySelector","infoBox","winnerText","dragstartHandler","e","dataTransfer","setData","classList","toString","textContent","dragoverHandler","preventDefault","dropEffect","dropHandler","playerBoard","player","computer","boatID","getData","boatClass","boat","startsWith","children","xStr","yStr","split","startX","parseInt","startY","isVertical","newID","nextSquare","parentNode","draggable","replaceChild","neighbourCoords","every","squares","div","className","renderPlayerBoats","startBattle","finalizeBoatPlacement","initGame","displayDiv","innerHTML","createElement","appendChild","playerSquare","addEventListener","createPlayerGrid","shipSizeArray","boatSquare","renderMovableBoats","boats","getElementsByClassName","toggle","addBoatEventListeners","computerSquare","createComputerGrid","renderPlayerBoard","renderComputerBoard","infoPlayerMove","playerClickHandler","removeEventListener","contains","addSquareEventListeners","remove","style","display","window","location","reload","startEventListener"],"sourceRoot":""}