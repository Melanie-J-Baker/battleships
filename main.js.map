{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleships/webpack/bootstrap","webpack://battleships/webpack/runtime/define property getters","webpack://battleships/webpack/runtime/hasOwnProperty shorthand","webpack://battleships/./src/factories/gameboard.ts","webpack://battleships/./src/helper.ts","webpack://battleships/./src/factories/player.ts","webpack://battleships/./src/DOM.ts","webpack://battleships/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export function GameboardFactory(name) {\n    const hits = [];\n    const misses = [];\n    const occupied = [];\n    const receiveAttack = (coord) => {\n        if (occupied.includes(coord))\n            hits.push(coord);\n        else\n            misses.push(coord);\n    };\n    const allSunk = () => {\n        return occupied.length === hits.length;\n    };\n    const newShip = (coords) => {\n        if (coords.some((coord) => occupied.includes(coord)))\n            return \"Coordinate(s) already occupied\";\n        else\n            occupied.push(...coords);\n    };\n    return {\n        name,\n        hits,\n        misses,\n        occupied,\n        receiveAttack,\n        allSunk,\n        newShip,\n    };\n}\n","// Return all 8 surrounding coordinates around (x, y)\nexport const findNeighbours = (x, y) => {\n    const inBounds = (x, y) => x >= 1 && x <= 10 && y >= 1 && y <= 10 ? `${x},${y}` : undefined;\n    return {\n        right: inBounds(x, y + 1),\n        left: inBounds(x, y - 1),\n        top: inBounds(x - 1, y),\n        bottom: inBounds(x + 1, y),\n        topleft: inBounds(x - 1, y - 1),\n        topright: inBounds(x - 1, y + 1),\n        bottomleft: inBounds(x + 1, y - 1),\n        bottomright: inBounds(x + 1, y + 1),\n    };\n};\n","import { findNeighbours } from \"../helper\";\nexport function PlayerFactory() {\n    const availableMoves = [\n        ...Array.from({ length: 10 }, (_, x) => Array.from({ length: 10 }, (_, y) => `${x + 1},${y + 1}`)).flat(),\n    ];\n    let lastHitCoord = null;\n    const attack = (board, target) => {\n        if (!availableMoves.includes(target))\n            return \"That move is not available\";\n        board.receiveAttack(target);\n        const index = availableMoves.indexOf(target);\n        if (index > -1)\n            availableMoves.splice(index, 1);\n    };\n    const computerMove = (board) => {\n        if (lastHitCoord === null) {\n            // Pick a random square to attack\n            const randomTarget = availableMoves[Math.floor(Math.random() * availableMoves.length)];\n            board.receiveAttack(randomTarget);\n            if (board.hits.includes(randomTarget)) {\n                lastHitCoord = randomTarget; // Store the last hit coordinate\n            }\n            const moveIndex = availableMoves.indexOf(randomTarget);\n            if (moveIndex > -1)\n                availableMoves.splice(moveIndex, 1);\n        }\n        else {\n            // Find neigbours of last hit\n            const [xStr, yStr] = lastHitCoord.split(\",\");\n            const x = parseInt(xStr, 10);\n            const y = parseInt(yStr, 10);\n            const neighbours = findNeighbours(x, y);\n            // Only orthogonal neighbours (up/down/left/right)\n            const possibleCoords = [\n                neighbours.right,\n                neighbours.left,\n                neighbours.top,\n                neighbours.bottom,\n            ].filter((c) => !!c && availableMoves.includes(c));\n            if (possibleCoords.length > 0) {\n                const target = possibleCoords[Math.floor(Math.random() * possibleCoords.length)];\n                board.receiveAttack(target);\n                if (board.hits.includes(target)) {\n                    lastHitCoord = target; // Chain hunting if hit again\n                }\n                else {\n                    lastHitCoord = null; // Reset if miss\n                }\n                const moveIndex = availableMoves.indexOf(target);\n                if (moveIndex > -1)\n                    availableMoves.splice(moveIndex, 1);\n            }\n            else {\n                // No valid neighbours remaining - fall back to random\n                lastHitCoord = null;\n                computerMove(board);\n            }\n        }\n    };\n    const playerMove = (event, computerBoard) => {\n        const target = event.target;\n        const targetCoord = target.id.slice(1);\n        if (availableMoves.includes(targetCoord)) {\n            attack(computerBoard, targetCoord);\n        }\n    };\n    return {\n        attack,\n        playerMove,\n        computerMove,\n        availableMoves,\n        lastHitCoord,\n    };\n}\n","import { initGame, startBattle } from \"./index\";\nimport { findNeighbours } from \"./helper\";\n// Helper function to return class name based on ship type\nfunction shipClass(type) {\n    switch (type) {\n        case \"C\":\n            return \"carrier\";\n        case \"B\":\n            return \"battleship\";\n        case \"D\":\n            return \"destroyer\";\n        case \"P\":\n            return \"patrolboat\";\n        default:\n            return \"\";\n    }\n}\nexport function getDOMElements() {\n    return {\n        playerGrid: document.getElementById(\"playerGrid\"),\n        playerHeader: document.getElementById(\"playerHeader\"),\n        computerGrid: document.getElementById(\"computerGrid\"),\n        computerHeader: document.getElementById(\"computerHeader\"),\n        start: document.getElementById(\"start\"),\n        heading: document.querySelector(\"h1\"),\n        infoBox: document.getElementById(\"info\"),\n        winnerText: document.getElementById(\"winner\"),\n    };\n}\nexport function createPlayerGrid(player, playerBoard, computer, computerBoard) {\n    const { playerGrid, playerHeader } = getDOMElements();\n    if (!playerGrid || !playerHeader)\n        return;\n    playerGrid.innerHTML = \"\";\n    for (let i = 0; i < 100; i++) {\n        let playerSquare = document.createElement(\"div\");\n        playerSquare.className = \"square pSquare\";\n        playerSquare.id = \"p\" + `${player.availableMoves[i]}`;\n        playerSquare.addEventListener(\"dragover\", dragoverHandler);\n        playerSquare.addEventListener(\"drop\", (e) => dropHandler(e, playerBoard, player, computer, computerBoard));\n        playerGrid.appendChild(playerSquare);\n    }\n    playerHeader.textContent = \"Player\";\n}\nexport function startEventListener() {\n    const { start, heading, infoBox } = getDOMElements();\n    if (start)\n        start.addEventListener(\"click\", function () {\n            if (start.textContent === \"Start Game\") {\n                start.textContent = \"Restart Game\";\n                heading.classList.remove(\"large\");\n                infoBox.style.display = \"block\";\n                initGame();\n            }\n            else {\n                window.location.reload();\n            }\n        });\n}\nexport function renderMovableBoats(player, playerBoard, computer, computerBoard) {\n    const { infoBox, computerGrid } = getDOMElements();\n    if (!computerGrid || !infoBox)\n        return;\n    let displayDiv = document.getElementById(\"boatsDisplay\");\n    if (!displayDiv) {\n        displayDiv = document.createElement(\"div\");\n        displayDiv.id = \"boatsDisplay\";\n        computerGrid.appendChild(displayDiv);\n    }\n    else {\n        displayDiv.innerHTML = \"\";\n    }\n    computerGrid.className = \"\";\n    createPlayerGrid(player, playerBoard, computer, computerBoard);\n    infoBox.textContent = \"Place your ships on the grid. Click to rotate ship\";\n    const shipSizeArray = [\n        [\"C\", \"C\", \"C\", \"C\", \"C\"],\n        [\"B\", \"B\", \"B\", \"B\"],\n        [\"B\", \"B\", \"B\", \"B\"],\n        [\"D\", \"D\", \"D\"],\n        [\"D\", \"D\", \"D\"],\n        [\"D\", \"D\", \"D\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n        [\"P\", \"P\"],\n    ];\n    for (let i = 0; i < shipSizeArray.length; i++) {\n        const boat = document.createElement(\"div\");\n        const type = shipSizeArray[i][0];\n        boat.className = `boat ${shipClass(type)}`;\n        boat.id = `${shipClass(type)}${i}`;\n        for (let j = 0; j < shipSizeArray[i].length; j++) {\n            const boatSquare = document.createElement(\"div\");\n            boatSquare.className = `boatSquare ${shipClass(type)}Square`;\n            boat.appendChild(boatSquare);\n        }\n        displayDiv.appendChild(boat);\n    }\n}\n// Add event listeners to boats for dragging and rotating\nexport function addBoatEventListeners() {\n    const { infoBox } = getDOMElements();\n    const boats = document.getElementsByClassName(\"boat\");\n    for (let i = 0; i < boats.length; i++) {\n        const boat = boats[i];\n        const firstChild = boat.firstElementChild;\n        // Only allow dragging from first square\n        if (firstChild) {\n            firstChild.draggable = true;\n            firstChild.addEventListener(\"dragstart\", (e) => {\n                if (infoBox)\n                    infoBox.textContent =\n                        \"Place your ships on the grid. Click to rotate ship\";\n                if (!e.dataTransfer)\n                    return;\n                // Pass the boat's ID and class\n                e.dataTransfer.setData(\"text\", boat.id);\n                e.dataTransfer.setData(\"text/class\", Array.from(boat.classList).toString());\n                // Compute cursor offset relative to boat\n                const rect = boat.getBoundingClientRect();\n                const offsetX = e.clientX - rect.left;\n                const offsetY = e.clientY - rect.top;\n                // Use the whole boat as the drag image\n                e.dataTransfer.setDragImage(boat, offsetX, offsetY);\n            });\n        }\n        // Disable dragging on the boat container itself\n        boat.draggable = false;\n        // Toggle vertical orientation on click\n        boat.addEventListener(\"click\", () => {\n            boat.classList.toggle(\"vertical\");\n        });\n    }\n    if (infoBox) {\n        infoBox.textContent = \"Place your ships on the grid. Click to rotate ship\";\n    }\n}\nfunction dragoverHandler(e) {\n    e.preventDefault();\n    if (e.dataTransfer)\n        e.dataTransfer.dropEffect = \"move\";\n}\nfunction dropHandler(e, playerBoard, player, computer, computerBoard) {\n    var _a;\n    e.preventDefault();\n    if (!e.dataTransfer)\n        return null;\n    const target = e.target;\n    const boatID = e.dataTransfer.getData(\"text\");\n    const boatClass = e.dataTransfer.getData(\"text/class\");\n    if (!((_a = target === null || target === void 0 ? void 0 : target.id) === null || _a === void 0 ? void 0 : _a.startsWith(\"p\")))\n        return null;\n    // Determine boat size\n    const boat = document.getElementById(boatID);\n    if (!boat)\n        return null;\n    const length = boat.children.length;\n    const [xStr, yStr] = target.id.slice(1).split(\",\");\n    const startX = parseInt(xStr, 10);\n    const startY = parseInt(yStr, 10);\n    const isVertical = boatClass.includes(\"vertical\");\n    const coords = [];\n    for (let i = 0; i < length; i++) {\n        const x = isVertical ? startX + i : startX;\n        const y = isVertical ? startY : startY + i;\n        coords.push(`${x},${y}`);\n    }\n    const placed = finalizeBoatPlacement(playerBoard, coords, player, computer, computerBoard, boatID);\n    return placed ? coords : null;\n}\nexport function renderPlayerBoats(playerBoard) {\n    const { playerGrid } = getDOMElements();\n    if (!playerGrid)\n        return;\n    const squares = playerGrid.children;\n    for (let i = 0; i < squares.length; i++) {\n        const div = squares[i];\n        const coord = div.id.slice(1);\n        // Reset state first\n        div.className = \"square pSquare\";\n        // Mark occupied/hit/miss from board state\n        if (playerBoard.hits.includes(coord)) {\n            div.classList.add(\"hit\");\n        }\n        else if (playerBoard.misses.includes(coord)) {\n            div.classList.add(\"miss\");\n        }\n        else if (playerBoard.occupied.includes(coord)) {\n            div.classList.add(\"occupied\");\n        }\n    }\n}\nexport function finalizeBoatPlacement(playerBoard, coords, player, computer, computerBoard, boatID) {\n    const { infoBox } = getDOMElements();\n    const occupied = new Set(playerBoard.occupied);\n    // Check overlap/touching\n    const allNeighbours = [];\n    for (const c of coords) {\n        const [xStr, yStr] = c.split(\",\");\n        const x = parseInt(xStr, 10);\n        const y = parseInt(yStr, 10);\n        const neighbours = findNeighbours(x, y);\n        allNeighbours.push(...Object.values(neighbours).filter(Boolean));\n    }\n    const overlap = coords.some((c) => occupied.has(c));\n    const touching = allNeighbours.some((n) => occupied.has(n));\n    if (overlap || touching) {\n        if (infoBox)\n            infoBox.textContent = \"Boat cannot be placed there!\";\n        return false;\n    }\n    // Commit placement\n    playerBoard.newShip(coords);\n    renderPlayerBoats(playerBoard);\n    // Remove boat from boatsDisplay\n    if (boatID) {\n        const draggedBoat = document.getElementById(boatID);\n        if (draggedBoat)\n            draggedBoat.remove();\n    }\n    // Check if all ships placed\n    if (playerBoard.occupied.length === 30) {\n        if (infoBox)\n            infoBox.textContent = \"All ships placed! Let the battle begin!\";\n        startBattle(player, computer, playerBoard, computerBoard);\n    }\n    return true;\n}\nexport function createComputerGrid(player, computerBoard) {\n    const { computerGrid, computerHeader } = getDOMElements();\n    if (!computerGrid || !computerHeader)\n        return;\n    computerGrid.innerHTML = \"\";\n    computerGrid.className = \"grid\";\n    for (let i = 0; i < 100; i++) {\n        let computerSquare = document.createElement(\"div\");\n        computerSquare.className = \"square cSquare\";\n        computerSquare.id = \"c\" + `${player.availableMoves[i]}`;\n        computerGrid.appendChild(computerSquare);\n    }\n    computerHeader.textContent = \"Computer\";\n    // Create computer's boats\n    computerBoard.newShip([\"1,6\", \"1,7\", \"1,8\", \"1,9\", \"1,10\"]);\n    computerBoard.newShip([\"8,2\", \"8,3\", \"8,4\", \"8,5\"]);\n    computerBoard.newShip([\"6,9\", \"7,9\", \"8,9\", \"9,9\"]);\n    computerBoard.newShip([\"3,2\", \"4,2\", \"5,2\"]);\n    computerBoard.newShip([\"10,5\", \"10,6\", \"10,7\"]);\n    computerBoard.newShip([\"4,7\", \"4,8\", \"4,9\"]);\n    computerBoard.newShip([\"1,1\", \"1,2\"]);\n    computerBoard.newShip([\"10,1\", \"10,2\"]);\n    computerBoard.newShip([\"5,5\", \"6,5\"]);\n    computerBoard.newShip([\"2,4\", \"3,4\"]);\n}\nexport function renderComputerBoard(computerBoard) {\n    const squares = document.getElementsByClassName(\"square cSquare\");\n    for (let i = 0; i < squares.length; i++) {\n        const coord = squares[i].id.slice(1);\n        if (computerBoard.hits.includes(coord))\n            squares[i].className = \"square cSquare hit\";\n        else if (computerBoard.misses.includes(coord))\n            squares[i].className = \"square cSquare miss\";\n    }\n}\nexport function renderPlayerBoard(playerBoard) {\n    const squares = document.getElementsByClassName(\"square pSquare\");\n    for (let i = 0; i < squares.length; i++) {\n        const coord = squares[i].id.slice(1);\n        if (playerBoard.hits.includes(coord))\n            squares[i].className = \"square pSquare hit\";\n        else if (playerBoard.misses.includes(coord))\n            squares[i].className = \"square pSquare miss\";\n        else if (playerBoard.occupied.includes(coord))\n            squares[i].className = \"square pSquare occupied\";\n    }\n}\n// Event listener management for computer grid squares\nexport function addSquareEventListeners(playerClickHandler) {\n    const squares = document.getElementsByClassName(\"square cSquare\");\n    for (var i = 0; i < squares.length; i++) {\n        squares[i].removeEventListener(\"click\", playerClickHandler);\n        if (!squares[i].classList.contains(\"hit\") &&\n            !squares[i].classList.contains(\"miss\")) {\n            squares[i].addEventListener(\"click\", playerClickHandler);\n        }\n    }\n}\n// Info helpers\nexport function infoPlayerMove() {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    infoBox.textContent = \"Your move! Choose a square to attack.\";\n}\nexport function infoComputerMove() {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    infoBox.textContent = \"Computer is taking their turn.\";\n}\nexport function infoPlayerWin() {\n    const { infoBox, winnerText } = getDOMElements();\n    if (infoBox)\n        infoBox.textContent = \"All of Computer's ships have been sunk! You win!\";\n    if (winnerText)\n        winnerText.style.display = \"block\";\n}\nexport function infoComputerWin() {\n    const { infoBox } = getDOMElements();\n    infoBox.textContent = \"Computer has sunk all your ships! You lose!\";\n}\nexport function infoSunkBoat(playerName, shipCoordsArray) {\n    const { infoBox } = getDOMElements();\n    if (!infoBox)\n        return;\n    let len = shipCoordsArray.shipCoords.length;\n    const label = len === 5\n        ? \"Carrier\"\n        : len === 4\n            ? \"Battleship\"\n            : len === 3\n                ? \"Destroyer\"\n                : len === 2\n                    ? \"Patrol boat\"\n                    : \"Ship\";\n    infoBox.textContent = `${playerName}'s ${label} sunk!`;\n}\n","import { GameboardFactory } from \"./factories/gameboard\";\nimport { PlayerFactory } from \"./factories/player\";\nimport { startEventListener, createComputerGrid, renderMovableBoats, addBoatEventListeners, renderComputerBoard, infoPlayerMove, addSquareEventListeners, renderPlayerBoard, } from \"./DOM\";\nstartEventListener();\nexport function createPlayersAndBoards() {\n    const player = PlayerFactory();\n    const computer = PlayerFactory();\n    const playerBoard = GameboardFactory(\"Player\");\n    const computerBoard = GameboardFactory(\"Computer\");\n    return { player, computer, playerBoard, computerBoard };\n}\nexport function initGame() {\n    const { player, playerBoard, computer, computerBoard } = createPlayersAndBoards();\n    renderMovableBoats(player, playerBoard, computer, computerBoard);\n    addBoatEventListeners();\n}\nexport function startBattle(player, computer, playerBoard, computerBoard) {\n    createComputerGrid(computer, computerBoard);\n    renderPlayerBoard(playerBoard);\n    renderComputerBoard(computerBoard);\n    infoPlayerMove();\n    addSquareEventListeners((e) => player.playerMove(e, computerBoard));\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","GameboardFactory","name","hits","misses","occupied","receiveAttack","coord","includes","push","allSunk","length","newShip","coords","some","findNeighbours","x","y","inBounds","undefined","right","left","top","bottom","topleft","topright","bottomleft","bottomright","PlayerFactory","availableMoves","Array","from","_","flat","lastHitCoord","attack","board","target","index","indexOf","splice","computerMove","randomTarget","Math","floor","random","moveIndex","xStr","yStr","split","parseInt","neighbours","possibleCoords","filter","c","playerMove","event","computerBoard","targetCoord","id","slice","shipClass","type","getDOMElements","playerGrid","document","getElementById","playerHeader","computerGrid","computerHeader","start","heading","querySelector","infoBox","winnerText","dragoverHandler","e","preventDefault","dataTransfer","dropEffect","dropHandler","playerBoard","player","computer","_a","boatID","getData","boatClass","startsWith","boat","children","startX","startY","isVertical","i","placed","Set","allNeighbours","values","Boolean","overlap","has","touching","n","textContent","squares","div","className","classList","add","renderPlayerBoats","draggedBoat","remove","startBattle","finalizeBoatPlacement","initGame","displayDiv","innerHTML","createElement","appendChild","playerSquare","addEventListener","createPlayerGrid","shipSizeArray","j","boatSquare","renderMovableBoats","boats","getElementsByClassName","firstChild","firstElementChild","draggable","setData","toString","rect","getBoundingClientRect","offsetX","clientX","offsetY","clientY","setDragImage","toggle","addBoatEventListeners","computerSquare","createComputerGrid","renderPlayerBoard","renderComputerBoard","infoPlayerMove","playerClickHandler","removeEventListener","contains","addSquareEventListeners","style","display","window","location","reload","startEventListener"],"sourceRoot":""}